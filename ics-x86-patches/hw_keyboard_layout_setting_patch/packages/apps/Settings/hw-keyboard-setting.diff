diff --git a/res/values-de/strings.xml b/res/values-de/strings.xml
index 0b61d1c..99af4fb 100644
--- a/res/values-de/strings.xml
+++ b/res/values-de/strings.xml
@@ -1581,4 +1581,11 @@
     <string name="backup_pw_cancel_button_text" msgid="8845630125391744615">"Abbrechen"</string>
     <string name="percentage" msgid="5866131581207788624">"<xliff:g id="NUMBER">%d</xliff:g>%%"</string>
     <string name="additional_system_update_settings_list_item_title" msgid="214987609894661992">"Zusätzliche Systemupdates"</string>
+    <string name="hardware_keyboard_layout_selector">Hardware-Layout Einstellungen</string>
+    <string name="hardware_keyboard_layout_info">Hardware-Tastatur-Layout geändert. Einstellung ist nach Neustart wirksam.</string>
+    <string name="hardware_keyboard_layout_failed">Fehler beim Ändern des Hardware-Tastatur-Layouts.</string>
+    <string name="hardware_keyboard_layout_selector_summary">Wähle ein Hardware-Tastatur Layout</string>    
+    <string name="hardware_keyboard_device_selector">Wähle eine Tastatur</string>
+    <string name="hardware_keyboard_device_selector_summary">Wähle ein Tastatur auf die die Einstellungen angewandt werden</string>
+    <string name="hardware_keyboard_first_select_device">Bitte vor Layoutänderungen eine Tastatur auswählen.</string>
 </resources>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 1e60917..8e8a3e7 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -704,4 +707,22 @@
         <!-- Status message when VPN is failed. -->
         <item>Unsuccessful</item>
     </string-array>
+    
+    <!-- Titles for hardware keyboard layout preference. -->
+    <string-array name="hardware_keyboard_layout_selector_titles">
+    	<item>Generic (default)</item>
+    	<item>English</item>
+    	<item>French</item>
+        <item>German</item>
+        <item>Russian</item>
+    </string-array>
+
+    <!-- Values for hardware keyboard layout preference. -->
+    <string-array name="hardware_keyboard_layout_selector_values" translatable="false" >
+    	<item>Generic</item>
+    	<item>qwerty</item>
+    	<item>fr</item>
+        <item>de</item>
+        <item>ru</item>
+    </string-array>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 9a29122..99eb756 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1152,6 +1152,25 @@
     <!-- Explanation of the Android Beam feature in the Android Beam settings panel. The use of "beam" here is as a verb and not considered trademarked. [CHAR LIMIT=NONE] -->
     <string name="android_beam_explained">When this feature is turned on, you can beam app content to another NFC-capable device by holding the devices close together. For example, you can beam Browser pages, YouTube videos, People contacts, and more.\n\nJust bring the devices together (typically back to back) and then touch your screen. The app determines what gets beamed.</string>
 
+    <!-- Ethernet configuration dialog -->
+    <string name="eth_config_title">Configure Ethernet device</string>
+    <string name="eth_setting">Ethernet setting</string>
+    <string name="eth_dev_list">Ethernet Devices:</string>
+    <string name="eth_con_type">Connection Type</string>
+    <string name="eth_con_type_dhcp">DHCP</string>
+    <string name="eth_con_type_manual">Static IP</string>
+    <string name="eth_dns">DNS address</string>
+    <string name="eth_gw">Gateway address</string>
+    <string name="eth_ipaddr">IP address</string>
+    <string name="eth_quick_toggle_title">Ethernet</string>
+    <string name="eth_quick_toggle_summary">Turn on Ethernet</string>
+    <string name="eth_radio_ctrl_title">Ethernet configuration</string>
+    <string name="eth_conf_perf_title">Ethernet configuration</string>
+    <string name="eth_conf_summary">Configure Ethernet devices</string>
+    <string name="eth_mask">Netmask</string>
+    <string name="eth_toggle_summary_off">Turn off Ethernet</string>
+    <string name="eth_toggle_summary_on">Turn on Ethernet</string>
+
     <!-- Wi-Fi Settings --> <skip />
     <!-- Used in the 1st-level settings screen to turn on Wi-Fi -->
     <string name="wifi_quick_toggle_title">Wi-Fi</string>
@@ -3779,5 +3798,12 @@ found in the list of installed apps.</string>
     from their cell phone carrier. The use of the string is similar to the string
     "system_update_settings_list_item_title" in this project. [CHAR LIMIT=25] -->
     <string name="additional_system_update_settings_list_item_title">Additional system updates</string>
+    <string name="hardware_keyboard_layout_selector">Hardware keyboard layout setting</string>
+    <string name="hardware_keyboard_layout_info">Hardware keyboard layout changed. Changed settings are available after reboot.</string>
+    <string name="hardware_keyboard_layout_failed">Error occured. Could not change layout.</string>
+    <string name="hardware_keyboard_layout_selector_summary">Choose a hardware keyboard layout</string>
+    <string name="hardware_keyboard_device_selector">Select hardware keyboard device</string>
+    <string name="hardware_keyboard_device_selector_summary">First select a keyboard for applying settings</string>
+    <string name="hardware_keyboard_first_select_device">Please first select a device before configurating layout.</string>
 
 </resources>
diff --git a/res/xml/language_settings.xml b/res/xml/language_settings.xml
index fbfb3d7..2ea19d6 100644
--- a/res/xml/language_settings.xml
+++ b/res/xml/language_settings.xml
@@ -58,6 +58,21 @@
                 android:summaryOn="@string/auto_punctuate_summary"
                 android:summaryOff="@string/auto_punctuate_summary"
                 android:persistent="false"/>
+                
+        <ListPreference android:key="hardware_keyboard_device_selector"
+                android:title="@string/hardware_keyboard_device_selector"
+                android:persistent="true"
+                android:summary="@string/hardware_keyboard_device_selector_summary"
+                />    
+                
+         <ListPreference android:key="hardware_keyboard_layout_selector"
+                android:title="@string/hardware_keyboard_layout_selector"
+                android:persistent="true"
+                android:summary="@string/hardware_keyboard_layout_selector_summary"
+                android:entryValues="@array/hardware_keyboard_layout_selector_values"
+                android:entries="@array/hardware_keyboard_layout_selector_titles"
+                />                     
+                
     </PreferenceCategory>
 
     <PreferenceCategory android:key="voice_category"
diff --git a/src/com/android/settings/inputmethod/InputMethodAndLanguageSettings.java b/src/com/android/settings/inputmethod/InputMethodAndLanguageSettings.java
index 4454389..3257a47 100644
--- a/src/com/android/settings/inputmethod/InputMethodAndLanguageSettings.java
+++ b/src/com/android/settings/inputmethod/InputMethodAndLanguageSettings.java
@@ -42,32 +42,46 @@ import android.provider.Settings.System;
 import android.text.TextUtils;
 import android.view.inputmethod.InputMethodInfo;
 import android.view.inputmethod.InputMethodManager;
+import android.widget.Toast;
+import android.os.SystemProperties;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import android.util.Log;
 import java.util.Set;
 
 public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
-        implements Preference.OnPreferenceChangeListener{
+        implements Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "InputMethodAndLanguageSettings";
 
     private static final String KEY_PHONE_LANGUAGE = "phone_language";
     private static final String KEY_CURRENT_INPUT_METHOD = "current_input_method";
     private static final String KEY_INPUT_METHOD_SELECTOR = "input_method_selector";
     private static final String KEY_USER_DICTIONARY_SETTINGS = "key_user_dictionary_settings";
+    private static final String KEY_HARDWARE_KEYBOARD_DEVICE_SELECTOR = "hardware_keyboard_device_selector";
+    private static final String KEY_HARDWARE_KEYBOARD_LAYOUT_SELECTOR = "hardware_keyboard_layout_selector";
+    private static final String KEY_HARD_KEYBOARD_CATEGORY = "hard_keyboard";
+    
+    private static final String ANDROID_POWER_BUTTON_DEVICE_NAME = "Android Power Button";
+    
     // false: on ICS or later
     private static final boolean SHOW_INPUT_METHOD_SWITCHER_SETTINGS = false;
 
     private static final String[] sSystemSettingNames = {
-        System.TEXT_AUTO_REPLACE, System.TEXT_AUTO_CAPS, System.TEXT_AUTO_PUNCTUATE,
+            System.TEXT_AUTO_REPLACE, System.TEXT_AUTO_CAPS, System.TEXT_AUTO_PUNCTUATE,
     };
 
     private static final String[] sHardKeyboardKeys = {
-        "auto_replace", "auto_caps", "auto_punctuate",
+            "auto_replace", "auto_caps", "auto_punctuate",
     };
 
     private int mDefaultInputMethodSelectorVisibility = 0;
     private ListPreference mShowInputMethodSelectorPref;
+    private ListPreference mShowHardwareKeyboardLayoutPref;
+    private ListPreference mShowHardwareKeyboardDevicePref;
+    private String currentDevice = "";
     private Preference mLanguagePref;
     private ArrayList<InputMethodPreference> mInputMethodPreferenceList =
             new ArrayList<InputMethodPreference>();
@@ -93,19 +107,62 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
         }
 
         if (getActivity().getAssets().getLocales().length == 1) {
-            // No "Select language" pref if there's only one system locale available.
+            // No "Select language" pref if there's only one system locale
+            // available.
             getPreferenceScreen().removePreference(findPreference(KEY_PHONE_LANGUAGE));
         } else {
             mLanguagePref = findPreference(KEY_PHONE_LANGUAGE);
         }
         if (SHOW_INPUT_METHOD_SWITCHER_SETTINGS) {
-            mShowInputMethodSelectorPref = (ListPreference)findPreference(
+            mShowInputMethodSelectorPref = (ListPreference) findPreference(
                     KEY_INPUT_METHOD_SELECTOR);
             mShowInputMethodSelectorPref.setOnPreferenceChangeListener(this);
             // TODO: Update current input method name on summary
             updateInputMethodSelectorSummary(loadInputMethodSelectorVisibility());
         }
 
+        // selector of hardware keyboard layout
+        mShowHardwareKeyboardLayoutPref = (ListPreference) findPreference(
+                KEY_HARDWARE_KEYBOARD_LAYOUT_SELECTOR);
+        mShowHardwareKeyboardLayoutPref.setOnPreferenceChangeListener(this);
+
+        mShowHardwareKeyboardDevicePref = (ListPreference) findPreference(
+                KEY_HARDWARE_KEYBOARD_DEVICE_SELECTOR);
+        mShowHardwareKeyboardDevicePref.setOnPreferenceChangeListener(this);
+
+        // detect available keyboards
+        List<String> keyboard_devices = new ArrayList<String>();
+        List<String> keyboard_device_values = new ArrayList<String>();
+        
+        int i = 0;
+        String device;
+        while(!((device = SystemProperties.get("persist.sys.keyboard." + i + ".name")).isEmpty()))
+        {
+            //do not list Android Power Button device
+            if (!device.equals(ANDROID_POWER_BUTTON_DEVICE_NAME)) {
+                keyboard_devices.add(device);
+                device = device.replaceAll("\\W", "_");
+                keyboard_device_values.add(device);                
+            }
+            i++;
+        }
+        
+        Collections.sort(keyboard_devices, String.CASE_INSENSITIVE_ORDER);
+        Collections.sort(keyboard_device_values, String.CASE_INSENSITIVE_ORDER);
+        mShowHardwareKeyboardDevicePref.setEntries(keyboard_devices
+                .toArray(new CharSequence[keyboard_devices.size()]));
+        mShowHardwareKeyboardDevicePref.setEntryValues(keyboard_device_values
+                .toArray(new CharSequence[keyboard_device_values.size()]));
+        
+        PreferenceCategory mCategory = (PreferenceCategory) findPreference(KEY_HARD_KEYBOARD_CATEGORY);
+        if(keyboard_device_values.size() == 1){ //just one keyboard --> means no selection necessary
+            currentDevice = keyboard_device_values.get(0);            
+            mCategory.removePreference(mShowHardwareKeyboardDevicePref);
+        }else if(keyboard_device_values.size() == 0){ //no keyboard available remove complete configuration
+            mCategory.removePreference(mShowHardwareKeyboardDevicePref);
+            mCategory.removePreference(mShowHardwareKeyboardLayoutPref);            
+        }
+
         new VoiceInputOutputSettings(this).onCreate();
 
         // Hard keyboard
@@ -118,11 +175,11 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
         getActivity().getIntent().setAction(null);
         mImm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
         mImis = mImm.getInputMethodList();
-        createImePreferenceHierarchy((PreferenceGroup)findPreference("keyboard_settings_category"));
+        createImePreferenceHierarchy((PreferenceGroup) findPreference("keyboard_settings_category"));
 
         final Intent intent = new Intent(Intent.ACTION_MAIN);
         intent.setClass(getActivity(), SpellCheckersSettingsActivity.class);
-        final SpellCheckersPreference scp = ((SpellCheckersPreference)findPreference(
+        final SpellCheckersPreference scp = ((SpellCheckersPreference) findPreference(
                 "spellcheckers_settings"));
         if (scp != null) {
             scp.setFragmentIntent(this, intent);
@@ -145,22 +202,29 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
         final Activity activity = getActivity();
         final Set<String> localeList = UserDictionaryList.getUserDictionaryLocalesList(activity);
         if (null == localeList) {
-            // The locale list is null if and only if the user dictionary service is
-            // not present or disabled. In this case we need to remove the preference.
+            // The locale list is null if and only if the user dictionary
+            // service is
+            // not present or disabled. In this case we need to remove the
+            // preference.
             getPreferenceScreen().removePreference(userDictionaryPreference);
         } else if (localeList.size() <= 1) {
             final Intent intent =
                     new Intent(UserDictionaryList.USER_DICTIONARY_SETTINGS_INTENT_ACTION);
             userDictionaryPreference.setTitle(R.string.user_dict_single_settings_title);
             userDictionaryPreference.setIntent(intent);
-            // If the size of localeList is 0, we don't set the locale parameter in the
-            // extras. This will be interpreted by the UserDictionarySettings class as
+            // If the size of localeList is 0, we don't set the locale parameter
+            // in the
+            // extras. This will be interpreted by the UserDictionarySettings
+            // class as
             // meaning "the current locale".
-            // Note that with the current code for UserDictionaryList#getUserDictionaryLocalesList()
-            // the locale list always has at least one element, since it always includes the current
-            // locale explicitly. @see UserDictionaryList.getUserDictionaryLocalesList().
+            // Note that with the current code for
+            // UserDictionaryList#getUserDictionaryLocalesList()
+            // the locale list always has at least one element, since it always
+            // includes the current
+            // locale explicitly. @see
+            // UserDictionaryList.getUserDictionaryLocalesList().
             if (localeList.size() == 1) {
-                final String locale = (String)localeList.toArray()[0];
+                final String locale = (String) localeList.toArray()[0];
                 userDictionaryPreference.getExtras().putString("locale", locale);
             }
         } else {
@@ -249,7 +313,7 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
             Settings.Secure.putInt(getContentResolver(),
                     Settings.Secure.INPUT_METHOD_SELECTOR_VISIBILITY, intValue);
             updateInputMethodSelectorSummary(intValue);
-        } catch(NumberFormatException e) {
+        } catch (NumberFormatException e) {
         }
     }
 
@@ -264,17 +328,50 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
         if (SHOW_INPUT_METHOD_SWITCHER_SETTINGS) {
             if (preference == mShowInputMethodSelectorPref) {
                 if (value instanceof String) {
-                    saveInputMethodSelectorVisibility((String)value);
+                    saveInputMethodSelectorVisibility((String) value);
                 }
             }
         }
+
+        if (preference == mShowHardwareKeyboardDevicePref) {
+            // select keyboard device for layout selection
+            if (value instanceof String) {
+                currentDevice = (String) value;
+            }
+        } else if (preference == mShowHardwareKeyboardLayoutPref) {
+            // change persistent keyboard layout property
+            if (value instanceof String && !currentDevice.isEmpty()) {
+                try {
+
+                    String layoutDesc = (String) value;
+
+                    SystemProperties.set("persist.sys.keylayout." + currentDevice,
+                            layoutDesc);
+
+                    Toast.makeText(this.getActivity(),
+                            R.string.hardware_keyboard_layout_info,
+                            Toast.LENGTH_LONG).show();
+
+                } catch (Exception e) {
+                    Toast.makeText(this.getActivity(),
+                            R.string.hardware_keyboard_layout_failed,
+                            Toast.LENGTH_LONG).show();
+                    Log.e("HARDWARE_KEYBOARD_LAYOUT", e.getMessage());
+                }
+            } else {
+                Toast.makeText(this.getActivity(),
+                        R.string.hardware_keyboard_first_select_device,
+                        Toast.LENGTH_LONG).show();
+            }
+        }
+
         return false;
     }
 
     private void updateActiveInputMethodsSummary() {
         for (Preference pref : mInputMethodPreferenceList) {
             if (pref instanceof InputMethodPreference) {
-                ((InputMethodPreference)pref).updateSummary();
+                ((InputMethodPreference) pref).updateSummary();
             }
         }
         updateCurrentImeName();
@@ -282,13 +379,14 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
 
     private void updateCurrentImeName() {
         final Context context = getActivity();
-        if (context == null || mImm == null) return;
+        if (context == null || mImm == null)
+            return;
         final Preference curPref = getPreferenceScreen().findPreference(KEY_CURRENT_INPUT_METHOD);
         if (curPref != null) {
             final CharSequence curIme = InputMethodAndSubtypeUtil.getCurrentInputMethodName(
                     context, getContentResolver(), mImm, mImis, getPackageManager());
             if (!TextUtils.isEmpty(curIme)) {
-                synchronized(this) {
+                synchronized (this) {
                     curPref.setSummary(curIme);
                 }
             }
@@ -368,7 +466,8 @@ public class InputMethodAndLanguageSettings extends SettingsPreferenceFragment
                     Settings.Secure.SELECTED_INPUT_METHOD_SUBTYPE), false, this);
         }
 
-        @Override public void onChange(boolean selfChange) {
+        @Override
+        public void onChange(boolean selfChange) {
             updateCurrentImeName();
         }
     }
